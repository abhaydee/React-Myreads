{"version":3,"sources":["BooksAPI.js","Shelf.js","Search.js","Main.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","concat","then","res","json","data","books","update","book","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","Shelf","image","_this","this","props","imageLinks","thumbnail","react_default","a","createElement","className","style","width","height","backgroundImage","onChange","event","moveshelf","target","value","currentshelf","disabled","title","authors","Component","Search","state","searchedbooks","updateinput","setState","searchingbooks","trim","undefined","BooksAPI","error","forEach","b","s","filter","B","_this2","react_router_dom","to","type","placeholder","map","searching","key","src_Shelf","Main","onClick","showSearchPage","BooksApp","screen","_this3","react_router","exact","path","render","src_Main","src_Search","React","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.d1cfaad8.chunk.js","sourcesContent":["\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React, {Component} from 'react';\r\nimport './App.css'\r\n\r\n\r\nclass Shelf extends Component{\r\n  \r\n\trender() {\r\n        let image;\r\n        if(typeof this.props.book.imageLinks === 'undefined')\r\n        {\r\n            image=''\r\n        }\r\n        else\r\n        {\r\n            image=this.props.book.imageLinks.thumbnail\r\n        }\r\n\r\n  \r\n\r\n\t\treturn (\r\n\t\t\t\r\n\t\t\r\n                      <li>\r\n                        <div className=\"book\">\r\n                            <div className=\"book-top\">\r\n                                <div className=\"book-cover\" style={{ width: 128, height: 188, backgroundImage: `url(${image})` }}></div>\r\n                                <div className=\"book-shelf-changer\">\r\n                                    <select onChange={(event)=> {this.props.moveshelf(this.props.book,event.target.value)}}\r\n                                      value={this.props.currentshelf }>\r\n                                        <option value=\"move\" disabled>Move to...</option>\r\n                                        <option value=\"currentlyReading\">Currently Reading</option>\r\n                                        <option value=\"wantToRead\">Want to Read</option>\r\n                                        <option value=\"read\">Read</option>\r\n                                        <option value=\"none\">None</option>\r\n                                    </select>\r\n\r\n\r\n\r\n                                    </div>\r\n                              </div>\r\n                              <div className=\"book-title\">{this.props.book.title}</div>\r\n                              <div className=\"book-authors\">{this.props.book.authors}</div>     \r\n                               \r\n                            </div>\r\n                      \r\n                      </li>\r\n                      \r\n                      \r\n                        \r\n                      \r\n                      \r\n\t\t);\r\n\t}\r\n}\r\nexport default Shelf;","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport * as BooksAPI from \"./BooksAPI\";\r\nimport Shelf from \"./Shelf\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Search extends Component {\r\n  state = {\r\n    query: \"\",\r\n    searchedbooks: []\r\n  };\r\n\r\n  updateinput = query => {\r\n    this.setState({ query: query });\r\n    this.searchingbooks(query);\r\n  };\r\n\r\n  searchingbooks = query => {\r\n    if (query.trim()) {\r\n      if (\r\n        this.state.query.trim() === \"\" ||\r\n        this.state.query.trim() === undefined\r\n      ) {\r\n        this.setState({ searchedbooks: [] });\r\n      }\r\n\r\n      {\r\n        BooksAPI.search(query).then(books => {\r\n          if (books.error) {\r\n            this.setState({ searchedbooks: [] });\r\n          } else {\r\n            books.forEach(b => {\r\n              let s = this.props.books.filter(B => B.id === b.id);\r\n              if (s[0]) {\r\n                b.shelf = s[0].shelf;\r\n              }\r\n            });\r\n            return this.setState({ searchedbooks: books });\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({ searchedbooks: [] });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"search-books\">\r\n        <div className=\"search-books-bar\">\r\n          <Link className=\"close-search\" to=\"/\">\r\n            {\" \"}\r\n            Close{\" \"}\r\n          </Link>\r\n\r\n          <div className=\"search-books-input-wrapper\">\r\n            {/*\r\n                  NOTES: The search from BooksAPI is limited to a particular set of search terms.\r\n                  You can find these search terms here:\r\n                  https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\r\n\r\n                  However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\r\n                  you don't find a specific author or title. Every search is limited by search terms.\r\n                */}\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Search by title or author\"\r\n              value={this.state.query}\r\n              onChange={event => {\r\n                this.updateinput(event.target.value);\r\n              }}\r\n            />\r\n            {/*{JSON.stringify(this.state)}*/}\r\n          </div>\r\n        </div>\r\n        <div className=\"search-books-results\">\r\n          <ol className=\"books-grid\">\r\n            {this.state.searchedbooks.map(searching => {\r\n              let shelf = \"none\";\r\n              this.props.books.map(book =>\r\n                book.id === searching.id ? (shelf = book.shelf) : \"\"\r\n              );\r\n              return (\r\n                <div key={searching.id}>\r\n                  <Shelf\r\n                    book={searching}\r\n                    moveshelf={this.props.moveshelf}\r\n                    currentshelf={shelf}\r\n                  />\r\n                </div>\r\n              );\r\n            })}\r\n          </ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Search;\r\n","import React, {Component} from 'react';\r\nimport './App.css'\r\nimport Shelf from './Shelf'\r\n\r\n\r\nclass Main extends Component{\r\n\trender() {\r\n\r\n\t\treturn (\r\n\t\t\t\r\n\t\t\t<div className=\"list-books\">\r\n            <div className=\"list-books-title\">\r\n              <h1>MyReads</h1>\r\n            </div>\r\n            <div className=\"list-books-content\">\r\n              <div>\r\n                <div className=\"bookshelf\">\r\n                  <h2 className=\"bookshelf-title\">Currently Reading</h2>\r\n                  <div className=\"bookshelf-books\">\r\n                  <ol className=\"books-grid\">\r\n                    {this.props.books\r\n                        .filter(book =>book.shelf === 'currentlyReading')\r\n                        .map(book =>(\r\n                          <div key={book.id}>\r\n                          <Shelf book={book} moveshelf={this.props.moveshelf}\r\n                            currentshelf=\"currentlyReading\"\r\n                          />\r\n                          </div>\r\n                        ))\r\n                      \r\n                      \r\n                      }\r\n                      \r\n                     \r\n                    </ol>\r\n                  </div>\r\n                </div>\r\n                <div className=\"bookshelf\">\r\n                  <h2 className=\"bookshelf-title\">Want to Read</h2>\r\n                  <div className=\"bookshelf-books\">\r\n                    <ol className=\"books-grid\">\r\n                    {this.props.books\r\n                        .filter(book =>book.shelf === 'wantToRead')\r\n                        .map(book =>(\r\n                          <div key={book.id}>\r\n                          <Shelf book={book} moveshelf={this.props.moveshelf}\r\n                            currentshelf=\"wantToRead\"\r\n                          />\r\n                          </div>\r\n                        ))\r\n                      \r\n                      \r\n                      }\r\n                      \r\n                     \r\n                    </ol>\r\n                  </div>\r\n                </div>\r\n                <div className=\"bookshelf\">\r\n                  <h2 className=\"bookshelf-title\">Read</h2>\r\n                  <div className=\"bookshelf-books\">\r\n                    <ol className=\"books-grid\">\r\n                    {this.props.books\r\n                      .filter(book => book.shelf === 'read')\r\n                      .map(book => (\r\n                        <div key={book.id}>\r\n                        <Shelf book={book} moveshelf={this.props.moveshelf}\r\n                            currentshelf=\"read\"\r\n                          />\r\n                       </div>\r\n                      ))\r\n                      \r\n                      }\r\n                    \r\n                      \r\n                    </ol>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"open-search\">\r\n              <button onClick={() => this.setState({ showSearchPage: true })}>Add a book</button>\r\n            </div>\r\n          </div>\r\n\t\t);\r\n\t}\r\n}\r\nexport default Main;","import React from 'react'\r\n\r\nimport Search from './Search';\r\n\r\nimport {\r\n  Route,Link\r\n} from 'react-router-dom'\r\nimport Main from './Main';\r\nimport './App.css'\r\nimport * as BooksAPI from './BooksAPI'\r\n\r\n\r\n\r\nclass BooksApp extends React.Component {\r\n  state = {\r\n    /**\r\n     * TODO: Instead of using this state variable to keep track of which page\r\n     * we're on, use the URL in the browser's address bar. This will ensure that\r\n     * users can use the browser's back and forward buttons to navigate between\r\n     * pages, as well as provide a good URL they can bookmark and share.\r\n     */\r\n    showSearchPage: false,\r\n    screen: '/',\r\n    books: [\r\n\r\n    ]\r\n  }\r\n\r\n  componentWillMount() {\r\n    BooksAPI.getAll().then((books) => {\r\n      this.setState({\r\n        books: books\r\n      })\r\n\r\n    })\r\n  }\r\n\r\n  moveshelf=(book,shelf)=>{\r\n    \r\n    BooksAPI.update(book,shelf)\r\n    BooksAPI.getAll().then((books) => {\r\n\r\n      books.shelf=shelf\r\n\r\n       this.setState({\r\n         books: books\r\n       })\r\n \r\n     })\r\n\r\n  }\r\n\r\n  render() {\r\n    return ( \r\n        <div className = \"app\" >\r\n        <Route exact path = \"/\"\r\n        render = {() => (\r\n            \r\n            <Main books={this.state.books} moveshelf={this.moveshelf} />\r\n            \r\n            \r\n        )}/>\r\n        \r\n            <Route exact path = \"/search\" render = { () => ( \r\n            <Search moveshelf={this.moveshelf} books={this.state.books}/>\r\n\r\n        )}/>\r\n        <Route exact path = \"/\" render = { () => ( \r\n                    <Link className=\"open-search\" to={\"/Search\"}>\r\n                        <button>Add a book</button>\r\n                    </Link>\r\n            )} />\r\n        </div>\r\n    )}\r\n}\r\nexport default BooksApp;","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.css'\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, \r\n    document.getElementById('root'))\r\n"],"sourceRoot":""}